/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class graph_t implements lcm.lcm.LCMEncodable
{
    public int num_vertices;
    public lcmtypes.vertex_t vertices[];
    public int num_edges;
    public lcmtypes.edge_t edges[];
 
    public graph_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x49189ad7b639b453L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.graph_t.class))
            return 0L;
 
        classes.add(lcmtypes.graph_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + lcmtypes.vertex_t._hashRecursive(classes)
             + lcmtypes.edge_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_vertices); 
 
        for (int a = 0; a < this.num_vertices; a++) {
            this.vertices[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.num_edges); 
 
        for (int a = 0; a < this.num_edges; a++) {
            this.edges[a]._encodeRecursive(outs); 
        }
 
    }
 
    public graph_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public graph_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.graph_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.graph_t o = new lcmtypes.graph_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_vertices = ins.readInt();
 
        this.vertices = new lcmtypes.vertex_t[(int) num_vertices];
        for (int a = 0; a < this.num_vertices; a++) {
            this.vertices[a] = lcmtypes.vertex_t._decodeRecursiveFactory(ins);
        }
 
        this.num_edges = ins.readInt();
 
        this.edges = new lcmtypes.edge_t[(int) num_edges];
        for (int a = 0; a < this.num_edges; a++) {
            this.edges[a] = lcmtypes.edge_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public lcmtypes.graph_t copy()
    {
        lcmtypes.graph_t outobj = new lcmtypes.graph_t();
        outobj.num_vertices = this.num_vertices;
 
        outobj.vertices = new lcmtypes.vertex_t[(int) num_vertices];
        for (int a = 0; a < this.num_vertices; a++) {
            outobj.vertices[a] = this.vertices[a].copy();
        }
 
        outobj.num_edges = this.num_edges;
 
        outobj.edges = new lcmtypes.edge_t[(int) num_edges];
        for (int a = 0; a < this.num_edges; a++) {
            outobj.edges[a] = this.edges[a].copy();
        }
 
        return outobj;
    }
 
}

